{"version":3,"file":"static/webpack/static/development/pages/index.js.701c22474be000e36e59.hot-update.js","sources":["webpack:///./generated/apolloComponents.tsx"],"sourcesContent":["export type Maybe<T> = T | null;\n/** All built-in and custom scalars, mapped to their actual values */\nexport type Scalars = {\n  ID: string;\n  String: string;\n  Boolean: boolean;\n  Int: number;\n  Float: number;\n  /** The `Upload` scalar type represents a file upload. */\n  Upload: any;\n};\n\nexport type ChangePasswordInput = {\n  password: Scalars[\"String\"];\n  token: Scalars[\"String\"];\n};\n\nexport type Mutation = {\n  createProduct: Product;\n  createUser: User;\n  changePassword?: Maybe<User>;\n  confirmUser: Scalars[\"Boolean\"];\n  forgotPassword: Scalars[\"Boolean\"];\n  login?: Maybe<User>;\n  logout: Scalars[\"Boolean\"];\n  addProfilePicture: Scalars[\"Boolean\"];\n  register: User;\n};\n\nexport type MutationCreateProductArgs = {\n  data: ProductInput;\n};\n\nexport type MutationCreateUserArgs = {\n  data: RegisterInput;\n};\n\nexport type MutationChangePasswordArgs = {\n  data: ChangePasswordInput;\n};\n\nexport type MutationConfirmUserArgs = {\n  token: Scalars[\"String\"];\n};\n\nexport type MutationForgotPasswordArgs = {\n  email: Scalars[\"String\"];\n};\n\nexport type MutationLoginArgs = {\n  password: Scalars[\"String\"];\n  email: Scalars[\"String\"];\n};\n\nexport type MutationAddProfilePictureArgs = {\n  picture: Scalars[\"Upload\"];\n};\n\nexport type MutationRegisterArgs = {\n  data: RegisterInput;\n};\n\nexport type Product = {\n  id: Scalars[\"ID\"];\n  name: Scalars[\"String\"];\n  price: Scalars[\"Float\"];\n};\n\nexport type ProductInput = {\n  name: Scalars[\"String\"];\n  price: Scalars[\"Float\"];\n};\n\nexport type Query = {\n  getProducts: Array<Product>;\n  me?: Maybe<User>;\n  hello: Scalars[\"String\"];\n};\n\nexport type RegisterInput = {\n  password: Scalars[\"String\"];\n  firstName: Scalars[\"String\"];\n  lastName: Scalars[\"String\"];\n  email: Scalars[\"String\"];\n};\n\nexport type User = {\n  id: Scalars[\"ID\"];\n  firstName: Scalars[\"String\"];\n  lastName: Scalars[\"String\"];\n  name: Scalars[\"String\"];\n  email: Scalars[\"String\"];\n  confirmed: Scalars[\"Boolean\"];\n};\nexport type LoginMutationVariables = {\n  email: Scalars[\"String\"];\n  password: Scalars[\"String\"];\n};\n\nexport type LoginMutation = { __typename?: \"Mutation\" } & {\n  login: Maybe<\n    { __typename?: \"User\" } & Pick<\n      User,\n      \"id\" | \"firstName\" | \"lastName\" | \"name\" | \"email\"\n    >\n  >;\n};\n\nexport type RegisterMutationVariables = {\n  data: RegisterInput;\n};\n\nexport type RegisterMutation = { __typename?: \"Mutation\" } & {\n  register: { __typename?: \"User\" } & Pick<\n    User,\n    \"id\" | \"firstName\" | \"lastName\" | \"name\" | \"name\" | \"email\"\n  >;\n};\n\nimport gql from \"graphql-tag\";\nimport * as React from \"react\";\nimport * as ReactApollo from \"react-apollo\";\nexport type Omit<T, K extends keyof T> = Pick<T, Exclude<keyof T, K>>;\n\nexport const LoginDocument = gql`\n  mutation Login($email: String!, $password: String!) {\n    login(email: $email, password: $password) {\n      id\n      firstName\n      lastName\n      name\n      email\n    }\n  }\n`;\nexport type LoginMutationFn = ReactApollo.MutationFn<\n  LoginMutation,\n  LoginMutationVariables\n>;\n\nexport const LoginComponent = (\n  props: Omit<\n    Omit<\n      ReactApollo.MutationProps<LoginMutation, LoginMutationVariables>,\n      \"mutation\"\n    >,\n    \"variables\"\n  > & { variables?: LoginMutationVariables }\n) => (\n  <ReactApollo.Mutation<LoginMutation, LoginMutationVariables>\n    mutation={LoginDocument}\n    {...props}\n  />\n);\n\nexport type LoginProps<TChildProps = {}> = Partial<\n  ReactApollo.MutateProps<LoginMutation, LoginMutationVariables>\n> &\n  TChildProps;\nexport function withLogin<TProps, TChildProps = {}>(\n  operationOptions?: ReactApollo.OperationOption<\n    TProps,\n    LoginMutation,\n    LoginMutationVariables,\n    LoginProps<TChildProps>\n  >\n) {\n  return ReactApollo.withMutation<\n    TProps,\n    LoginMutation,\n    LoginMutationVariables,\n    LoginProps<TChildProps>\n  >(LoginDocument, {\n    alias: \"withLogin\",\n    ...operationOptions\n  });\n}\nexport const RegisterDocument = gql`\n  mutation Register($data: RegisterInput!) {\n    register(data: $data) {\n      id\n      firstName\n      lastName\n      name\n      name\n      email\n    }\n  }\n`;\nexport type RegisterMutationFn = ReactApollo.MutationFn<\n  RegisterMutation,\n  RegisterMutationVariables\n>;\n\nexport const RegisterComponent = (\n  props: Omit<\n    Omit<\n      ReactApollo.MutationProps<RegisterMutation, RegisterMutationVariables>,\n      \"mutation\"\n    >,\n    \"variables\"\n  > & { variables?: RegisterMutationVariables }\n) => (\n  <ReactApollo.Mutation<RegisterMutation, RegisterMutationVariables>\n    mutation={RegisterDocument}\n    {...props}\n  />\n);\n\nexport type RegisterProps<TChildProps = {}> = Partial<\n  ReactApollo.MutateProps<RegisterMutation, RegisterMutationVariables>\n> &\n  TChildProps;\nexport function withRegister<TProps, TChildProps = {}>(\n  operationOptions?: ReactApollo.OperationOption<\n    TProps,\n    RegisterMutation,\n    RegisterMutationVariables,\n    RegisterProps<TChildProps>\n  >\n) {\n  return ReactApollo.withMutation<\n    TProps,\n    RegisterMutation,\n    RegisterMutationVariables,\n    RegisterProps<TChildProps>\n  >(RegisterDocument, {\n    alias: \"withRegister\",\n    ...operationOptions\n  });\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AACA;AAsHA;AACA;AACA;AAGA;AAgBA;AAAA;AAUA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AATA;AAmBA;AAQA;AAMA;AANA;AASA;AACA;AAiBA;AAAA;AAUA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AATA;AAmBA;AAQA;AAMA;AANA;AASA;;;;A","sourceRoot":""}