import { OperationVariablesToObject } from '@graphql-codegen/visitor-plugin-common';
import { Kind } from 'graphql';
export class TypeScriptOperationVariablesToObject extends OperationVariablesToObject {
    constructor(_scalars, _convertName, _avoidOptionals, _immutableTypes) {
        super(_scalars, _convertName);
        this._avoidOptionals = _avoidOptionals;
        this._immutableTypes = _immutableTypes;
    }
    clearOptional(str) {
        if (str.startsWith('Maybe')) {
            return str.replace(/^Maybe<(.*?)>$/i, '$1');
        }
        return str;
    }
    wrapAstTypeWithModifiers(baseType, typeNode) {
        if (typeNode.kind === Kind.NON_NULL_TYPE) {
            const type = this.wrapAstTypeWithModifiers(baseType, typeNode.type);
            return this.clearOptional(type);
        }
        else if (typeNode.kind === Kind.LIST_TYPE) {
            const innerType = this.wrapAstTypeWithModifiers(baseType, typeNode.type);
            return `Maybe<${this._immutableTypes ? 'ReadonlyArray' : 'Array'}<${innerType}>>`;
        }
        else {
            return `Maybe<${baseType}>`;
        }
    }
    formatFieldString(fieldName, isNonNullType, hasDefaultValue) {
        if (hasDefaultValue || isNonNullType || this._avoidOptionals) {
            return fieldName;
        }
        else {
            return `${fieldName}?`;
        }
    }
    formatTypeString(fieldType, isNonNullType, hasDefaultValue) {
        if (hasDefaultValue) {
            return this.clearOptional(fieldType);
        }
        return fieldType;
    }
}
//# sourceMappingURL=typescript-variables-to-object.js.map