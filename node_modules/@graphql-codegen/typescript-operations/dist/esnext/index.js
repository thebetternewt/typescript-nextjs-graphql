import { visit, concatAST, Kind } from 'graphql';
import { TypeScriptDocumentsVisitor } from './visitor';
export const plugin = (schema, documents, config) => {
    const allAst = concatAST(documents.reduce((prev, v) => {
        return [...prev, v.content];
    }, []));
    const allFragments = allAst.definitions.filter(d => d.kind === Kind.FRAGMENT_DEFINITION).map(fragmentDef => ({ name: fragmentDef.name.value, onType: fragmentDef.typeCondition.name.value }));
    const visitorResult = visit(allAst, {
        leave: new TypeScriptDocumentsVisitor(schema, config, allFragments),
    });
    return visitorResult.definitions.join('\n');
};
//# sourceMappingURL=index.js.map