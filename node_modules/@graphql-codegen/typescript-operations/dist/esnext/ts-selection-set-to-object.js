import { SelectionSetToObject } from '@graphql-codegen/visitor-plugin-common';
import { isNonNullType, isListType } from 'graphql';
export class TypeScriptSelectionSetToObject extends SelectionSetToObject {
    constructor(_scalars, _schema, _convertName, _addTypename, _loadedFragments, _immutableTypes, _parentSchemaType, _selectionSet) {
        super(_scalars, _schema, _convertName, _addTypename, _loadedFragments, _parentSchemaType, _selectionSet);
        this._immutableTypes = _immutableTypes;
    }
    createNext(parentSchemaType, selectionSet) {
        return new TypeScriptSelectionSetToObject(this._scalars, this._schema, this._convertName, this._addTypename, this._loadedFragments, this._immutableTypes, parentSchemaType, selectionSet);
    }
    clearOptional(str) {
        if (str.startsWith('Maybe')) {
            return str.replace(/^Maybe<(.*?)>$/i, '$1');
        }
        return str;
    }
    formatNamedField(name) {
        return this._immutableTypes ? `readonly ${name}` : name;
    }
    wrapTypeWithModifiers(baseType, type) {
        if (isNonNullType(type)) {
            return this.clearOptional(this.wrapTypeWithModifiers(baseType, type.ofType));
        }
        else if (isListType(type)) {
            const innerType = this.wrapTypeWithModifiers(baseType, type.ofType);
            return `Maybe<${this._immutableTypes ? 'ReadonlyArray' : 'Array'}<${innerType}>>`;
        }
        else {
            return `Maybe<${baseType}>`;
        }
    }
}
//# sourceMappingURL=ts-selection-set-to-object.js.map