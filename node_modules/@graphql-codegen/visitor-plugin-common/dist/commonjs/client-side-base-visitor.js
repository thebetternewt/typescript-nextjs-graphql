"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const index_1 = require("./index");
const autoBind = require("auto-bind");
const graphql_1 = require("graphql");
const dependency_graph_1 = require("dependency-graph");
const graphql_tag_1 = require("graphql-tag");
const plugin_helpers_1 = require("@graphql-codegen/plugin-helpers");
const utils_1 = require("./utils");
class ClientSideBaseVisitor extends index_1.BaseVisitor {
    constructor(_fragments, rawConfig, additionalConfig) {
        super(rawConfig, {
            noGraphQLTag: utils_1.getConfigValue(rawConfig.noGraphQLTag, false),
            gqlImport: rawConfig.gqlImport || null,
            ...additionalConfig,
        });
        this._fragments = _fragments;
        autoBind(this);
    }
    _getFragmentName(fragment) {
        return (typeof fragment === 'string' ? fragment : fragment.name.value) + 'FragmentDoc';
    }
    _extractFragments(document) {
        return (graphql_1.print(document).match(/\.\.\.[a-z0-9\_]+/gi) || []).map(name => name.replace('...', ''));
    }
    _transformFragments(document) {
        return this._extractFragments(document).map(document => this._getFragmentName(document));
    }
    _includeFragments(fragments) {
        if (fragments) {
            return `${fragments
                .filter((name, i, all) => all.indexOf(name) === i)
                .map(name => '${' + name + '}')
                .join('\n')}`;
        }
        return '';
    }
    _prepareDocument(documentStr) {
        return documentStr;
    }
    _gql(node) {
        const doc = this._prepareDocument(`
    ${graphql_1.print(node)}
    ${this._includeFragments(this._transformFragments(node))}`);
        if (this.config.noGraphQLTag) {
            const gqlObj = graphql_tag_1.default(doc);
            if (gqlObj && gqlObj['loc']) {
                delete gqlObj.loc;
            }
            return JSON.stringify(gqlObj);
        }
        return 'gql`' + doc + '`';
    }
    _generateFragment(fragmentDocument) {
        const name = this._getFragmentName(fragmentDocument);
        return `export const ${name}${this.config.noGraphQLTag ? ': DocumentNode' : ''} = ${this._gql(fragmentDocument)};`;
    }
    get fragments() {
        if (this._fragments.length === 0) {
            return '';
        }
        const graph = new dependency_graph_1.DepGraph({ circular: true });
        for (const fragment of this._fragments) {
            if (graph.hasNode(fragment.name.value)) {
                const cachedAsString = graphql_1.print(graph.getNodeData(fragment.name.value));
                const asString = graphql_1.print(fragment);
                if (cachedAsString !== asString) {
                    throw new Error(`Duplicated fragment called '${fragment.name}'!`);
                }
            }
            graph.addNode(fragment.name.value, fragment);
        }
        this._fragments.forEach(fragment => {
            const depends = this._extractFragments(fragment);
            if (depends) {
                depends.forEach(name => {
                    graph.addDependency(fragment.name.value, name);
                });
            }
        });
        return graph
            .overallOrder()
            .map(name => this._generateFragment(graph.getNodeData(name)))
            .join('\n');
    }
    _parseImport(importStr) {
        const [moduleName, propName] = importStr.split('#');
        return {
            moduleName,
            propName,
        };
    }
    getImports() {
        const gqlImport = this._parseImport(this.config.gqlImport || 'graphql-tag');
        let imports = [];
        if (!this.config.noGraphQLTag) {
            imports.push(`
import ${gqlImport.propName ? `{ ${gqlImport.propName === 'gql' ? 'gql' : `${gqlImport.propName} as gql`} }` : 'gql'} from '${gqlImport.moduleName}';`);
        }
        else {
            imports.push(`import { DocumentNode } from 'graphql';`);
        }
        return imports.join('\n');
    }
    buildOperation(node, documentVariableName, operationType, operationResultType, operationVariablesTypes) {
        return null;
    }
    OperationDefinition(node) {
        if (!node.name || !node.name.value) {
            return null;
        }
        const documentVariableName = this.convertName(node, {
            suffix: 'Document',
            useTypesPrefix: false,
        });
        const documentString = `export const ${documentVariableName}${this.config.noGraphQLTag ? ': DocumentNode' : ''} = ${this._gql(node)};`;
        const operationType = plugin_helpers_1.toPascalCase(node.operation);
        const operationResultType = this.convertName(node, {
            suffix: operationType,
        });
        const operationVariablesTypes = this.convertName(node, {
            suffix: operationType + 'Variables',
        });
        const additional = this.buildOperation(node, documentVariableName, operationType, operationResultType, operationVariablesTypes);
        return [documentString, additional].filter(a => a).join('\n');
    }
}
exports.ClientSideBaseVisitor = ClientSideBaseVisitor;
//# sourceMappingURL=client-side-base-visitor.js.map