import { TypeNode, VariableNode, NameNode, ValueNode } from 'graphql';
import { ScalarsMap, ConvertNameFn } from './types';
import { BaseVisitorConvertOptions } from './base-visitor';
export interface InterfaceOrVariable {
    name?: NameNode;
    variable?: VariableNode;
    type: TypeNode;
    defaultValue?: ValueNode;
}
export declare class OperationVariablesToObject {
    protected _scalars: ScalarsMap;
    protected _convertName: ConvertNameFn<BaseVisitorConvertOptions>;
    constructor(_scalars: ScalarsMap, _convertName: ConvertNameFn<BaseVisitorConvertOptions>);
    getName<TDefinitionType extends InterfaceOrVariable>(node: TDefinitionType): string;
    transform<TDefinitionType extends InterfaceOrVariable>(variablesNode: ReadonlyArray<TDefinitionType>): string;
    protected getScalar(name: string): string;
    protected transformVariable<TDefinitionType extends InterfaceOrVariable>(variable: TDefinitionType): string;
    wrapAstTypeWithModifiers(baseType: string, typeNode: TypeNode): string;
    protected formatFieldString(fieldName: string, isNonNullType: boolean, hasDefaultValue: boolean): string;
    protected formatTypeString(fieldType: string, isNonNullType: boolean, hasDefaultValue: boolean): string;
}
