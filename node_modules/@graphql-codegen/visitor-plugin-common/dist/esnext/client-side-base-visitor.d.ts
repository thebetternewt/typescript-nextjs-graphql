import { BaseVisitor, ParsedConfig, RawConfig } from './index';
import { FragmentDefinitionNode, OperationDefinitionNode } from 'graphql';
export interface RawClientSideBasePluginConfig extends RawConfig {
    noGraphQLTag?: boolean;
    gqlImport?: string;
}
export interface ClientSideBasePluginConfig extends ParsedConfig {
    /**
     * @name noGraphQLTag
     * @type boolean
     * @default false
     * @description Instead of adding gql tag with the GraphQL operation, it uses the percompiled JSON representation (DocumentNode)
     * of the operation.
     *
     * @example
     * ```yml
     * config:
     *   noGraphQLTag: true
     * ```
     */
    noGraphQLTag: boolean;
    /**
     * @name gqlImport
     * @type string
     * @default gql#graphql-tag
     * @description Customize from which module will `gql` be imported from.
     * This is useful if you want to use modules other than `graphql-tag`, e.g. `graphql.macro`.
     *
     * @example graphql.macro
     * ```yml
     * config:
     *   gqlImport: graphql.macro#gql
     * ```
     * @example Gatsby
     * ```yml
     * config:
     *   gqlImport: gatsby#graphql
     * ```
     */
    gqlImport: string;
}
export declare class ClientSideBaseVisitor<TRawConfig extends RawClientSideBasePluginConfig = RawClientSideBasePluginConfig, TPluginConfig extends ClientSideBasePluginConfig = ClientSideBasePluginConfig> extends BaseVisitor<TRawConfig, TPluginConfig> {
    protected _fragments: FragmentDefinitionNode[];
    constructor(_fragments: FragmentDefinitionNode[], rawConfig: TRawConfig, additionalConfig: Partial<TPluginConfig>);
    protected _getFragmentName(fragment: FragmentDefinitionNode | string): string;
    protected _extractFragments(document: FragmentDefinitionNode | OperationDefinitionNode): string[] | undefined;
    protected _transformFragments(document: FragmentDefinitionNode | OperationDefinitionNode): string[] | undefined;
    protected _includeFragments(fragments: string[]): string;
    protected _prepareDocument(documentStr: string): string;
    protected _gql(node: FragmentDefinitionNode | OperationDefinitionNode): string;
    protected _generateFragment(fragmentDocument: FragmentDefinitionNode): string | void;
    readonly fragments: string;
    protected _parseImport(importStr: string): {
        moduleName: string;
        propName: string;
    };
    getImports(): string;
    protected buildOperation(node: OperationDefinitionNode, documentVariableName: string, operationType: string, operationResultType: string, operationVariablesTypes: string): string;
    OperationDefinition(node: OperationDefinitionNode): string;
}
