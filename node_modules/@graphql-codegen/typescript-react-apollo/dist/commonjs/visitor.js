"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const visitor_plugin_common_1 = require("@graphql-codegen/visitor-plugin-common");
const autoBind = require("auto-bind");
const graphql_1 = require("graphql");
const plugin_helpers_1 = require("@graphql-codegen/plugin-helpers");
const change_case_1 = require("change-case");
class ReactApolloVisitor extends visitor_plugin_common_1.ClientSideBaseVisitor {
    constructor(fragments, rawConfig) {
        super(fragments, rawConfig, {
            withHOC: visitor_plugin_common_1.getConfigValue(rawConfig.withHOC, true),
            withComponent: visitor_plugin_common_1.getConfigValue(rawConfig.withComponent, true),
            withHooks: visitor_plugin_common_1.getConfigValue(rawConfig.withHooks, false),
            withMutationFn: visitor_plugin_common_1.getConfigValue(rawConfig.withMutationFn, true),
            hooksImportFrom: visitor_plugin_common_1.getConfigValue(rawConfig.hooksImportFrom, 'react-apollo-hooks'),
            reactApolloImportFrom: visitor_plugin_common_1.getConfigValue(rawConfig.reactApolloImportFrom, 'react-apollo'),
        });
        autoBind(this);
    }
    getImports() {
        const baseImports = super.getImports();
        const imports = [];
        if (this.config.withComponent) {
            imports.push(`import * as React from 'react';`);
        }
        if (this.config.withComponent || this.config.withHOC) {
            imports.push(`import * as ReactApollo from '${typeof this.config.reactApolloImportFrom === 'string' ? this.config.reactApolloImportFrom : 'react-apollo'}';`);
        }
        if (this.config.withHooks) {
            imports.push(`import * as ReactApolloHooks from '${typeof this.config.hooksImportFrom === 'string' ? this.config.hooksImportFrom : 'react-apollo-hooks'}';`);
        }
        imports.push(`export type Omit<T, K extends keyof T> = Pick<T, Exclude<keyof T, K>>`);
        return [baseImports, ...imports].join('\n');
    }
    _buildHocProps(operationName, operationType) {
        const typeVariableName = this.convertName(operationName + plugin_helpers_1.toPascalCase(operationType));
        const variablesVarName = this.convertName(operationName + plugin_helpers_1.toPascalCase(operationType) + 'Variables');
        const argType = operationType === 'mutation' ? 'MutateProps' : 'DataProps';
        return `Partial<ReactApollo.${argType}<${typeVariableName}, ${variablesVarName}>>`;
    }
    _buildMutationFn(node, operationResultType, operationVariablesTypes) {
        if (node.operation === 'mutation') {
            return `export type ${this.convertName(node.name.value + 'MutationFn')} = ReactApollo.MutationFn<${operationResultType}, ${operationVariablesTypes}>;`;
        }
        return null;
    }
    _buildOperationHoc(node, documentVariableName, operationResultType, operationVariablesTypes) {
        const operationName = this.convertName(node.name.value, { useTypesPrefix: false });
        const propsTypeName = this.convertName(node.name.value, { suffix: 'Props' });
        const propsVar = `export type ${propsTypeName}<TChildProps = {}> = ${this._buildHocProps(node.name.value, node.operation)} & TChildProps;`;
        const hocString = `export function with${operationName}<TProps, TChildProps = {}>(operationOptions?: ReactApollo.OperationOption<
  TProps,
  ${operationResultType},
  ${operationVariablesTypes},
  ${propsTypeName}<TChildProps>>) {
    return ReactApollo.with${change_case_1.titleCase(node.operation)}<TProps, ${operationResultType}, ${operationVariablesTypes}, ${propsTypeName}<TChildProps>>(${documentVariableName}, {
      alias: 'with${operationName}',
      ...operationOptions
    });
};`;
        return [propsVar, hocString].filter(a => a).join('\n');
    }
    _buildComponent(node, documentVariableName, operationType, operationResultType, operationVariablesTypes) {
        const componentName = this.convertName(node.name.value, { suffix: 'Component', useTypesPrefix: false });
        const isVariablesRequired = operationType === 'Query' && node.variableDefinitions.some(variableDef => variableDef.type.kind === graphql_1.Kind.NON_NULL_TYPE);
        return `
export const ${componentName} = (props: Omit<Omit<ReactApollo.${operationType}Props<${operationResultType}, ${operationVariablesTypes}>, '${operationType.toLowerCase()}'>, 'variables'> & { variables${isVariablesRequired ? '' : '?'}: ${operationVariablesTypes} }) => (
  <ReactApollo.${operationType}<${operationResultType}, ${operationVariablesTypes}> ${node.operation}={${documentVariableName}} {...props} />
);
`;
    }
    _buildHooks(node, operationType, documentVariableName, operationResultType, operationVariablesTypes) {
        const operationName = this.convertName(node.name.value, { suffix: change_case_1.titleCase(operationType), useTypesPrefix: false });
        return `
export function use${operationName}(baseOptions?: ReactApolloHooks.${operationType}HookOptions<${node.operation !== 'query' ? `${operationResultType}, ` : ''}${operationVariablesTypes}>) {
  return ReactApolloHooks.use${operationType}<${operationResultType}, ${operationVariablesTypes}>(${documentVariableName}, baseOptions);
};`;
    }
    buildOperation(node, documentVariableName, operationType, operationResultType, operationVariablesTypes) {
        const mutationFn = this.config.withMutationFn ? this._buildMutationFn(node, operationResultType, operationVariablesTypes) : null;
        const component = this.config.withComponent ? this._buildComponent(node, documentVariableName, operationType, operationResultType, operationVariablesTypes) : null;
        const hoc = this.config.withHOC ? this._buildOperationHoc(node, documentVariableName, operationResultType, operationVariablesTypes) : null;
        const hooks = this.config.withHooks ? this._buildHooks(node, operationType, documentVariableName, operationResultType, operationVariablesTypes) : null;
        return [mutationFn, component, hoc, hooks].filter(a => a).join('\n');
    }
}
exports.ReactApolloVisitor = ReactApolloVisitor;
//# sourceMappingURL=visitor.js.map