import { visit, concatAST, Kind } from 'graphql';
import { ReactApolloVisitor } from './visitor';
import { extname } from 'path';
export const plugin = (schema, documents, config) => {
    const allAst = concatAST(documents.reduce((prev, v) => {
        return [...prev, v.content];
    }, []));
    const operationsCount = allAst.definitions.filter(d => d.kind === Kind.OPERATION_DEFINITION);
    if (operationsCount.length === 0) {
        return '';
    }
    const allFragments = allAst.definitions.filter(d => d.kind === Kind.FRAGMENT_DEFINITION);
    const visitor = new ReactApolloVisitor(allFragments, config);
    const visitorResult = visit(allAst, { leave: visitor });
    return [visitor.getImports(), visitor.fragments, ...visitorResult.definitions.filter(t => typeof t === 'string')].join('\n');
};
export const validate = async (schema, documents, config, outputFile) => {
    if (config.withComponent === false) {
        if (extname(outputFile) !== '.ts' && extname(outputFile) !== '.tsx') {
            throw new Error(`Plugin "react-apollo" with "noComponents" requires extension to be ".ts" or ".tsx"!`);
        }
    }
    else {
        if (extname(outputFile) !== '.tsx') {
            throw new Error(`Plugin "react-apollo" requires extension to be ".tsx"!`);
        }
    }
};
//# sourceMappingURL=index.js.map