import { post } from 'request';
import { introspectionQuery, buildClientSchema } from 'graphql';
import { isUri } from 'valid-url';
export class IntrospectionFromUrlLoader {
    canHandle(pointerToSchema) {
        return !!isUri(pointerToSchema);
    }
    handle(url, schemaOptions) {
        let headers = {};
        if (schemaOptions) {
            if (Array.isArray(schemaOptions.headers)) {
                headers = schemaOptions.headers.reduce((prev, v) => (Object.assign({}, prev, v)), {});
            }
            else if (typeof schemaOptions.headers === 'object') {
                headers = schemaOptions.headers;
            }
        }
        let extraHeaders = Object.assign({ Accept: 'application/json', 'Content-Type': 'application/json' }, headers);
        return new Promise((resolve, reject) => {
            post({
                url: url,
                json: {
                    query: introspectionQuery,
                },
                headers: extraHeaders,
            }, (err, _response, body) => {
                if (err) {
                    reject(err);
                    return;
                }
                const bodyJson = body.data;
                let errorMessage;
                if (body.errors && body.errors.length > 0) {
                    errorMessage = body.errors.map((item) => item.message).join(', ');
                }
                else if (!bodyJson) {
                    errorMessage = body;
                }
                if (errorMessage) {
                    reject('Unable to download schema from remote: ' + errorMessage);
                    return;
                }
                if (!bodyJson.__schema) {
                    throw new Error('Invalid schema provided!');
                }
                resolve(buildClientSchema(bodyJson));
            });
        });
    }
}
//# sourceMappingURL=introspection-from-url.js.map