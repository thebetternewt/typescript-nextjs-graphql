"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const graphql_1 = require("graphql");
const fs_1 = require("fs");
const isValidPath = require("is-valid-path");
const path_1 = require("path");
class IntrospectionFromFileLoader {
    stripBOM(content) {
        content = content.toString();
        // Remove byte order marker. This catches EF BB BF (the UTF-8 BOM)
        // because the buffer-to-string conversion in `fs.readFileSync()`
        // translates it to FEFF, the UTF-16 BOM.
        if (content.charCodeAt(0) === 0xfeff) {
            content = content.slice(1);
        }
        return content;
    }
    parseBOM(content) {
        return JSON.parse(this.stripBOM(content));
    }
    canHandle(pointerToSchema) {
        return isValidPath(pointerToSchema) && fs_1.existsSync(pointerToSchema) && path_1.extname(pointerToSchema) === '.json';
    }
    handle(pointerToSchema, _options) {
        return new Promise((resolve, reject) => {
            const fullPath = path_1.isAbsolute(pointerToSchema) ? pointerToSchema : path_1.resolve(process.cwd(), pointerToSchema);
            if (fs_1.existsSync(fullPath)) {
                try {
                    const fileContent = fs_1.readFileSync(fullPath, 'utf8');
                    if (!fileContent) {
                        reject(`Unable to read local introspection file: ${fullPath}`);
                    }
                    let introspection = this.parseBOM(fileContent);
                    if (introspection.data) {
                        introspection = introspection.data;
                    }
                    if (!introspection.__schema) {
                        throw new Error('Invalid schema provided!');
                    }
                    resolve(graphql_1.buildClientSchema(introspection));
                }
                catch (e) {
                    reject(e);
                }
            }
            else {
                reject(`Unable to locate local introspection file: ${fullPath}`);
            }
        });
    }
}
exports.IntrospectionFromFileLoader = IntrospectionFromFileLoader;
//# sourceMappingURL=introspection-from-file.js.map