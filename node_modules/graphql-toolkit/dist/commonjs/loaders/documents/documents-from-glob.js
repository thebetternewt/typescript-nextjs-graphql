"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const graphql_1 = require("graphql");
const isGlob = require("is-glob");
const glob = require("glob");
const fs_1 = require("fs");
const path_1 = require("path");
const isValidPath = require("is-valid-path");
const extract_document_string_from_code_file_1 = require("../../utils/extract-document-string-from-code-file");
const VALID_DOCUMENT_KINDS = [graphql_1.Kind.OPERATION_DEFINITION, graphql_1.Kind.FRAGMENT_DEFINITION];
const GQL_EXTENSIONS = ['.graphql', '.graphqls', '.gql'];
class DocumentsFromGlob {
    canHandle(doc) {
        return isGlob(doc) || isValidPath(doc);
    }
    documentsFromGlobs(documentGlob, options) {
        const globOptions = {};
        if (options && 'ignore' in options) {
            globOptions.ignore = options.ignore;
        }
        return new Promise((resolve, reject) => {
            glob(documentGlob, globOptions, (err, files) => {
                if (err) {
                    reject(err);
                }
                if (!files || files.length === 0) {
                    console['warn'](`No files matched for glob expression: ${documentGlob}`);
                }
                resolve(files);
            });
        });
    }
    async loadFileContent(filePath, options) {
        if (fs_1.existsSync(filePath)) {
            const fileContent = fs_1.readFileSync(filePath, 'utf8');
            const fileExt = path_1.extname(filePath);
            if (!fileContent || fileContent.trim() === '') {
                console['warn'](`Empty file found: "${filePath}", skipping...`);
                return null;
            }
            if (GQL_EXTENSIONS.includes(fileExt)) {
                return graphql_1.parse(new graphql_1.Source(fileContent, filePath));
            }
            const foundDoc = await extract_document_string_from_code_file_1.extractDocumentStringFromCodeFile(new graphql_1.Source(fileContent, filePath), options);
            if (foundDoc) {
                return graphql_1.parse(new graphql_1.Source(foundDoc, filePath));
            }
            else {
                return null;
            }
        }
        else {
            throw new Error(`Failed to load a document. Document file ${filePath} does not exists.`);
        }
    }
    async loadDocumentsSources(filePaths, options) {
        const sources$ = Promise.all(filePaths
            .map(async (filePath) => ({ filePath, content: await this.loadFileContent(filePath, options) })));
        return (await sources$)
            .filter(result => {
            if (!result.content) {
                return false;
            }
            const invalidDefinitions = result.content.definitions.filter(definition => !VALID_DOCUMENT_KINDS.includes(definition.kind));
            if (invalidDefinitions.length === 0) {
                return true;
            }
            else {
                console['warn'](`File "${result.filePath}" was filtered because it contains an invalid GraphQL document definition!`);
                return false;
            }
        });
    }
    async handle(doc, options) {
        const foundDocumentsPaths = await this.documentsFromGlobs(doc, options);
        return this.loadDocumentsSources(foundDocumentsPaths, options);
    }
}
exports.DocumentsFromGlob = DocumentsFromGlob;
//# sourceMappingURL=documents-from-glob.js.map